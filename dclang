#!/usr/bin/env python

import binascii
import hashlib
import optparse
import os
import subprocess
import sys

import analysis

optparser = optparse.OptionParser()
optparser.add_option('-i', '--inputs')
optparser.add_option('-o', '--output')
optparser.add_option('--tool', default = '/usr/bin/clang',
	help = 'The tool (compiler, linker, etc.) doing the work')

optparser.add_option('--paths', default = '',
	help = 'Flags that specify e.g. include or library directories')

optparser.add_option('--flags', default = '', help = 'Flags that modify the compilation process')

(opts, args) = optparser.parse_args()

def hash(s):
	sha = hashlib.sha256()
	sha.update(s)
	return binascii.b2a_base64(sha.digest()).strip()
	
def hash_file(filename):
	return hash('\n'.join(open(filename).readlines()))


inputs = opts.inputs.split(',')
includes = analysis.parse_includes(inputs)


print "Tool: %24s: %s" % (opts.tool, hash_file(opts.tool))
print "Flags: %23s: %s" % (opts.flags, hash(opts.flags))

print 'Input files:'
for input in inputs:
	print '%30s: %s' % (input, hash_file(input))
print

if len(includes) > 0:
	print 'Include files:'
	for include in includes:
		print "%30s: %s" % (include, hash_file(include))
	print


paths = [ i for i in opts.paths.split(',') if len(i) > 0 ]
flags = [ i for i in opts.flags.split(' ') if len(i) > 0 ]
argv = [ 'clang' ] + paths + flags + [ '-o', opts.output ] + inputs

output = subprocess.check_call(argv)
